---
// Página de administración para gestionar IPs baneadas
---

<html lang="es">
    <head>
        <meta charset="utf-8" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>Panel de Administración - IPs Baneadas</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }

            body {
                font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }

            .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                border-radius: 12px;
                box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
                overflow: hidden;
            }

            .header {
                background: #2c3e50;
                color: white;
                padding: 20px;
                text-align: center;
            }

            .header h1 {
                font-size: 2rem;
                margin-bottom: 10px;
            }

            .content {
                padding: 30px;
            }

            .section {
                margin-bottom: 40px;
            }

            .section h2 {
                color: #2c3e50;
                margin-bottom: 20px;
                padding-bottom: 10px;
                border-bottom: 2px solid #3498db;
            }

            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin-bottom: 30px;
            }

            .stat-card {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 8px;
                border-left: 4px solid #3498db;
            }

            .stat-card h3 {
                color: #2c3e50;
                margin-bottom: 10px;
            }

            .stat-number {
                font-size: 2rem;
                font-weight: bold;
                color: #3498db;
            }

            .ip-list {
                background: #f8f9fa;
                border-radius: 8px;
                padding: 20px;
            }

            .ip-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 15px;
                background: white;
                margin-bottom: 10px;
                border-radius: 6px;
                border: 1px solid #e9ecef;
            }

            .ip-info {
                flex: 1;
            }

            .ip-address {
                font-weight: bold;
                color: #2c3e50;
                font-family: "Courier New", monospace;
            }

            .ip-details {
                color: #6c757d;
                font-size: 0.9rem;
                margin-top: 5px;
            }

            .unban-btn {
                background: #e74c3c;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                cursor: pointer;
                font-size: 0.9rem;
                transition: background 0.3s;
            }

            .unban-btn:hover {
                background: #c0392b;
            }

            .refresh-btn {
                background: #3498db;
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 6px;
                cursor: pointer;
                font-size: 1rem;
                margin-bottom: 20px;
                transition: background 0.3s;
            }

            .refresh-btn:hover {
                background: #2980b9;
            }

            .empty-state {
                text-align: center;
                color: #6c757d;
                padding: 40px;
            }

            .loading {
                text-align: center;
                color: #6c757d;
                padding: 40px;
            }

            .error {
                background: #f8d7da;
                color: #721c24;
                padding: 15px;
                border-radius: 6px;
                margin-bottom: 20px;
                border: 1px solid #f5c6cb;
            }

            .success {
                background: #d4edda;
                color: #155724;
                padding: 15px;
                border-radius: 6px;
                margin-bottom: 20px;
                border: 1px solid #c3e6cb;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>🔒 Panel de Administración</h1>
                <p>Gestión de IPs baneadas y estadísticas de contacto</p>
            </div>

            <div class="content">
                <div class="section">
                    <button class="refresh-btn" onclick="loadData()"
                        >🔄 Actualizar Datos</button
                    >
                    <div id="message"></div>
                </div>

                <div class="section">
                    <h2>📊 Estadísticas</h2>
                    <div class="stats-grid">
                        <div class="stat-card">
                            <h3>IPs Baneadas</h3>
                            <div class="stat-number" id="bannedCount">-</div>
                        </div>
                        <div class="stat-card">
                            <h3>Intentos de Contacto</h3>
                            <div class="stat-number" id="attemptsCount">-</div>
                        </div>
                    </div>
                </div>

                <div class="section">
                    <h2>🚫 IPs Baneadas</h2>
                    <div class="ip-list" id="bannedIPs">
                        <div class="loading">Cargando...</div>
                    </div>
                </div>

                <div class="section">
                    <h2>📈 Intentos de Contacto Recientes</h2>
                    <div class="ip-list" id="contactAttempts">
                        <div class="loading">Cargando...</div>
                    </div>
                </div>
            </div>
        </div>

        <script>
            const ADMIN_KEY = "tu_clave_admin_secreta"; // Cambia esto por una clave segura

            interface ContactAttempt {
                count: number;
                lastAttempt: string;
            }

            interface AdminData {
                bannedIPs: string[];
                contactAttempts: Record<string, ContactAttempt>;
            }

            async function loadData(): Promise<void> {
                try {
                    const response = await fetch(
                        `/api/contact?admin_key=${ADMIN_KEY}`,
                    );

                    if (!response.ok) {
                        throw new Error("No autorizado");
                    }

                    const data: AdminData = await response.json();
                    displayData(data);
                    showMessage("Datos actualizados correctamente", "success");
                } catch (error) {
                    console.error("Error al cargar datos:", error);
                    showMessage(
                        "Error al cargar los datos. Verifica la clave de administrador.",
                        "error",
                    );
                }
            }

            function displayData(data: AdminData): void {
                // Actualizar estadísticas
                const bannedCountElement =
                    document.getElementById("bannedCount");
                const attemptsCountElement =
                    document.getElementById("attemptsCount");

                if (bannedCountElement) {
                    bannedCountElement.textContent =
                        data.bannedIPs.length.toString();
                }
                if (attemptsCountElement) {
                    attemptsCountElement.textContent = Object.keys(
                        data.contactAttempts,
                    ).length.toString();
                }

                // Mostrar IPs baneadas
                const bannedIPsContainer = document.getElementById("bannedIPs");
                if (bannedIPsContainer) {
                    if (data.bannedIPs.length === 0) {
                        bannedIPsContainer.innerHTML =
                            '<div class="empty-state">No hay IPs baneadas</div>';
                    } else {
                        bannedIPsContainer.innerHTML = data.bannedIPs
                            .map(
                                (ip: string) => `
                        <div class="ip-item">
                            <div class="ip-info">
                                <div class="ip-address">${ip}</div>
                                <div class="ip-details">IP baneada por spam</div>
                            </div>
                            <button class="unban-btn" onclick="unbanIP('${ip}')">Desbanear</button>
                        </div>
                    `,
                            )
                            .join("");
                    }
                }

                // Mostrar intentos de contacto
                const attemptsContainer =
                    document.getElementById("contactAttempts");
                if (attemptsContainer) {
                    const attempts = Object.entries(data.contactAttempts);

                    if (attempts.length === 0) {
                        attemptsContainer.innerHTML =
                            '<div class="empty-state">No hay intentos de contacto registrados</div>';
                    } else {
                        attemptsContainer.innerHTML = attempts
                            .map(
                                ([ip, attemptData]: [
                                    string,
                                    ContactAttempt,
                                ]) => `
                        <div class="ip-item">
                            <div class="ip-info">
                                <div class="ip-address">${ip}</div>
                                <div class="ip-details">
                                    Intentos: ${attemptData.count} | Último: ${new Date(attemptData.lastAttempt).toLocaleString()}
                                </div>
                            </div>
                        </div>
                    `,
                            )
                            .join("");
                    }
                }
            }

            async function unbanIP(ip: string): Promise<void> {
                if (
                    !confirm(
                        `¿Estás seguro de que quieres desbanear la IP ${ip}?`,
                    )
                ) {
                    return;
                }

                try {
                    const response = await fetch(
                        `/api/contact?admin_key=${ADMIN_KEY}&ip=${ip}`,
                        {
                            method: "DELETE",
                        },
                    );

                    if (response.ok) {
                        showMessage(
                            `IP ${ip} desbaneada exitosamente`,
                            "success",
                        );
                        loadData(); // Recargar datos
                    } else {
                        throw new Error("Error al desbanear IP");
                    }
                } catch (error) {
                    console.error("Error al desbanear IP:", error);
                    showMessage("Error al desbanear la IP", "error");
                }
            }

            function showMessage(message: string, type: string): void {
                const messageDiv = document.getElementById("message");
                if (messageDiv) {
                    messageDiv.innerHTML = `<div class="${type}">${message}</div>`;

                    setTimeout(() => {
                        messageDiv.innerHTML = "";
                    }, 5000);
                }
            }

            // Cargar datos al cargar la página
            document.addEventListener("DOMContentLoaded", loadData);
        </script>
    </body>
</html>
